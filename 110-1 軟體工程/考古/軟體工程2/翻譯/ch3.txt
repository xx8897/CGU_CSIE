CH3 Agile Development
＊Manifesto for Agile Development 敏捷開發宣言
-獨立的工作成員和人員互動勝於流程和工具的管理
-工作的軟體勝於全面的文書
-客戶的合作勝於契約的談判
-回應變動勝於遵循流程

＊What is adility?
-對於改變作出有效率的回應
-利益相關者間有效率的溝通
-將客戶拉進團隊
-組織一個團隊就能控制工作的運行
-軟體快速增量的遞送

★＊An Agile Process
-由使用者需求所驅動
-擬定短期開發
-迭代的開發流程，側重於精隨(建造活動)
-產出多個"軟體單位"
-當改變發生時要調適

★＊The Agile Principle
-最為優先的事情是早期透過早期與持續交付有價值的軟體來使客戶滿意
-歡迎需求的變動，即使是在開發的晚期，敏捷式流程駕馭變動來做為客戶的競爭優勢
-頻繁交付工作產生的軟體，週期越短越好
-領域專家與開發成員要一同作業，並貫穿整個專案開發時期
-使用積極的工作人員來建構專案，給予他們環境以及支援所需的一切，並且相信他們能完成工作
-在開發團隊中最快也最有效的傳遞方式，就是面對面的溝通
-工作產生的軟體是衡量進度最重要的關鍵
-敏捷式流程倡導水平一致的軟體開發
-專案發起者,開發人員以及使用者都必須一值維持專案進度
-持續重視專案的優勢以及設計品質
-最好的架構,需求以及設計會出現在能自我管理的團隊
-在規律的反覆之間，團隊會反省及思考如何更有效率，然後調整與修正團隊的開發方式

★＊Extreme Programming(XP) 極限程式設計
-是使用最廣泛的敏捷軟體，最初由Kent Beck提出
-XP planning
 -由"user story"著手
 -軟體團隊評估所有訴求後再分配費用
 -專案分組化合併成易於交付的部分
 -承諾交付日期
 -在增量第一次部分專案的速度確定後，評估後續交貨的日期
-XP design
 -遵循KIS原則
 -鼓勵使用CRC卡
 -當遇到困難的問題時，提出"速解"的設計原型
 -鼓勵"重構"，並檢討改善
-XP coding
 -在coding前先提出部分軟體測試的方法
 -鼓勵 pait programming
-XP testing
 -每日進行部分軟體測試
 -使用者驗收

＊Human Factors
-這個程序模型是為了符合人們和團隊的需求
-關鍵就在於此必須存在整個敏捷團隊
 -競爭
 -共識
 -合作
 -決策能力
 -解決問題的方法
 -互信互重
 -自我組織

＊Adapt Software Development Method 適應性軟體開發
-Jim Highsmith 提出
-ASD
 -任務驅動性規劃
 -基於組件的焦點
 -使用"time-boxing"
 -明確考慮風險
 -強調需求匯集
 -強調整個程序中"學習"的效益

＊Dynamic System Development 動態系統開發方法
-由DSDM聯盟提出
-DSDM九原則
 -用戶參予是必要的
 -DSDM團隊必須有權做決定
 -重要是要頻繁交付
 -符合商業目的是可接受交付產品的基本標準
 -循環執行,部分開發是必要的
 -開發過程中變化是可逆的
 -要求要處於高品質
 -透過life-cycle測試並整合

＊Scrum
-最初由Schwaber和Beedle提出
-Scrum
 -開發工作背劃分回"packets"
 -測試與文件寫作的持續更新
 -工作精神要一直存在，而非只因需要而製作
 -會議減短
 -demo

＊Crystal
-由Cockburn和Highsmith提出
-Crystal
 -對於可操作問題特別重視
 -face-to-face溝通
 -反思研討會，審查團隊工作習慣

＊Feature Driven Development 特徵驅動開發
-由Peter Coad提出
-FDD
 -定義功能
 -設定模板
 -功能表和按功能規劃
 -設計,建造合併
-整體模型->功能表->按功能計畫->按功能設計->按功能建造

★＊Agile Modeling 敏捷建模
-最初由Scott Ambler
-Agile Model
 -有目的的模型
 -使用多個模型
 -travel light
 -內文比表現重要
 -知道模型及可用來建造的工具
 -本土化
