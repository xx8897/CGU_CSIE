CH4 Principle that Guide Process 指導實踐原則

★＊Principles that Guide Process 指導程序原則
-敏捷
-注重質量
-準備適應
-建立有效率的團隊
-建立溝通協調機制
-管理變革
-評估風險
-創造可為他人提供價值的產品

★＊Pinciples that Guide Practice 指導實踐原則
-分而治之
-了解抽象化的用處
-爭取一致性
-注重訊息傳遞
-建立有效模組化軟體
-尋找模組
-允許的話，提出問題以及不同觀點的解決方法
-有人維護軟體

★＊Communication Principles 溝通原則
-聆聽
-溝通前先準備
-有人促進會議進行
-面對面討論是最好的
-記下要點與決定
-爭取合作
-保持集中，模組化討論
-當有不清楚時，畫圖理解
-同意，不同意，特性和功能不明確無法當下釐清時>>跳過
-談判不是比賽或遊戲，最好是雙贏

＊Planning Principles 規劃原則
-了解專案的範圍
-讓客戶參與規劃
-意識到計畫是迭代
-以現有的知識為基礎來規劃
-當定義計畫時考慮風險
-實際
-當定義計畫時調整粒度
-定義確保品質的程序
-如何接納改變
-經常追蹤計畫並視需求調整

＊Modeling Principles 建模原則
-需求模型(分析模型)：代表客戶的要求描繪三個不同結構域的軟體，信息域、功能域、行為域
-設計模型可幫助練習者有效建構：架構、使用者介面、組件級的細節

＊Requiring Modeling Principles 需求建構原則
-問題必須被表示和理解
-軟體表現的功能需被定義
-要顯示軟體的行為(結果)
-描述資訊、功能、行為時必須以分層方式進行
-分析任務須從基本訊息與實作細節開始

＊Design Modeling Principles 設計模型原則
-設計應追溯到需求模型
-始終考慮待建系統
-數據設計和處理功能一樣重要
-使用者介面應考慮到最終用戶的需求，但在任何情況下強調簡單使用
-組件設計應功能上獨立
-設計模型應容易了解
-設計時應迭代開發，隨者每次開發，設計者應追求更簡單性

＊Angile Modeling Principles 敏捷建模原則
-軟體開發團隊的首要目標是創建軟體而非建立模型
-Travel-light-不要創建多於需求的模型
-努力產生描述問題和軟體的最簡易模型
-建立適合改變的模型
-能夠說明每個模型的明確目的
-熟悉開發系統的模型
-試者建立有用的模型，忘掉"建立最好的模型"這個想法
-別被教條式模型困住，如果溝通成功，呈現是次要的
-如果覺得模型是不對的，即使仍在紙上，也必須持續關注
-儘你所能地得到反饋

＊Construction Principles 建造原則
-讓建造活動包含了一組編碼和測試，使得軟體得以交付使用者及最終用戶
-編碼原則、概念和敏捷編程風格、編程語言、編程方法有關
-測試原理和概念使測試的設計能以最小的時間、精力揭開系統錯誤

＊Preparation Principles 準備原則
-了解你正在試圖解決的問題
-了解基本的設計原理和理念
-選擇一個能提供編程工具，使編程更加容易的編程環境
-選擇一個能滿足軟體需求，且易在還經中使用的編程語言
-創建一組測試單元，在coding完成後能直接測試應用

＊Coding Principles 編程原則
-藉由結構化的編程方式限制演算法
-考慮使用結隊編程
-選擇滿足設計需求的資料結構
-了解軟體架構並創造出與之一致的介面
-條件邏輯盡可能簡單
-創造巢狀迴圈使它們易於測試
-選擇有意義的變數名稱，並按照其他地方的編程標準
-編寫程式要自行記錄
-創建可視化佈局(縮進、並行)以便於理解

＊Ralidation Principles 驗證原則
-在適當的時候展示程式
-執行單元測試並糾正已發現的錯誤
-重構代碼

★＊Testing Principles 測試原則
-所有測試應源於客戶的需求
-測試開始之前應計劃許久
-Pateto原則通用於軟體測試
-測試應由小到大
-詳盡的測試是不可能的

＊Deployment Principles 部屬原則
-軟體必須加以管理
-完整交付必須包含組
-軟體交付之前須建立支持的制度
-適當的教學材料必須提供給最終用戶
-有bug的軟體應先修復在交付