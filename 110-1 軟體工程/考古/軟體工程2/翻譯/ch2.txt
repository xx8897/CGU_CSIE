＊概觀
建立高品質軟體的指南是軟體流程
軟體流程被調整去符合軟體工程師和管理人員的需求，因為他們承擔了軟體產品的開法
一個軟體流程提供了一個管理活動的架構，很容易失控
現代軟體流程必須要靈活，對特定那些活動要嚴格要求，且要可以控制，產出的流程需要適用於團隊和產品
不同種類的專案要有不同的軟體流程
軟體工程師的工作產品(程序、文檔、數據)為定義在軟體流程上的活動結果
最好能檢驗這個軟體流程有多好的因子為運作的品質、即時性、長期的可行性

＊軟體流程
高品質的軟體，需要定義大活動、小活動、任務的架構
定義軟體設計時的方法
被那些非常具有創意且非常具有知識的軟體工程師所編寫的軟體是能滿足市場需求的

＊一般軟體處理框架
溝通
計畫
模型
建構
配置

★＊護傘活動
軟體專案追蹤和控制
危機管理
軟體品質保證
正規技術評論
量測
軟體規劃管理
重複使用性管理
工作產品準備和製造

★＊Process Flow操作流程
描述關於每五個架構的大活動小活動及任務如何用從順序及時間方面組織在一起
線性流程是用循序的方式來執行，從溝通開始部屬結束
疊代流程是用循環的方式來執行，藉由每個循環去建立更完整的版本
平行流程是在一個項目中同時進行很多的活動


＊Task Sets任務集
每一個軟體工程動作，都可以用task sets來呈現
小的專案不需要task sets，不需像已複雜項目團隊為本的task sets 一樣大且詳盡的
修改task sets去滿足軟體專案的特定需求和團隊的特點

＊Process Patterns 流程樣板
軟體流程的內容在解釋怎麼去解決一個project的方法或在描述一個模板
軟體團隊可以組合樣板去建構一個解決需求最好方法的程序

＊程序樣版模型
Name(有意義)
Forces(遇到什麼環境，和能讓問題更加明確且可影響解決方案的指示)
Type
  -階段模式(定義流程框架活動的問題)
  -任務模式(定義和成功的軟體工程實務有關的行動或工作任務的問題)
  -相位模式(定義發生在流程中框架活動的順序)
Initial Context初始環境(描述在使用模式前所需要的條件)
  -什麼樣的組織或團隊的活動已經發生過
  -進入流程的狀態是什麼
  -已有什麼樣的軟體工程資訊或專案資訊已經存在
Solution(描述如何正確地實行樣板)
Resulting context 結果環境(描述樣板被成功執行後，會產生的情況)
  -什麼樣的組織或團隊活動必須已經發生
  -退出流程的狀態是什麼
  -已經發展出什麼樣的軟體工程資訊或專案資訊
Related Patterns(與此樣板直接相關的樣板)
Known uses/examples(此樣板的應用實例)

＊Process Assessment and Improvement 流程評估和改量
標準CMMI流程改善評估方法(SCAMPI)提供五個步驟的過程評估模型，結合五個階段(起始、診斷、建立、行動、學習)
以CMM為基礎的內部流程改善評估(CMAIPI)，提供診斷技術以評估軟體組織相對的成熟度。
SPICE(ISO/IEC15504)標準定義為一組軟體流程評估的需求
ISO 9001:2000 for Software定義為品質管理系統想要提升產品品質及提高顧客滿意度的需求 

★＊Prescriptive Process Models規定的流程模型
起初就先提出軟體開發的混亂
他們帶來了軟體工程工作，並且提供軟體團隊合理的引導
他們無法在一個不斷變化的計算環境下，對於軟體發展的問題有明確的答案

★＊Software Process Models 軟體流程模型
瀑布模型(Waterfall Model) 經典的生命週期，當需求清楚地時被理解時，雖是舊式但是個合理的方式。
增量模型(Incremental Models) 交付軟體中微薄但核心的部分，每部分是建立在已完成的部分上。
演化模型(Evolutionary Models)
原型模型(Prototyping Model) 當顧客有合理的需求時這是好的第一步，但缺乏細節。開發人員需要抵抗壓力，將粗略的模型擴展到生產產品。
螺旋模型(Spiral Model) 兼顧了原型模型的迭代特徵和瀑布模型的系統化與嚴格監控。
並行開發模型(Concurrent Development Model) 並行開發工程 - 允許軟體開發團隊在任何過程模中表現迭代和同時的元素。

＊Specialized Process Models 專門的流程模型
基於原件的開發  螺旋模型變化，其應用是建立在預先包裝的軟體元件，稱為classes。
形式化的方法模型  嚴謹的數學符號被用來說明、設計、檢驗以電腦為基礎的系統。
面向導向的軟體開發  面向導向程式，提供過程為了定義、說明、設計和建構軟體方面，像是使用者介面、安全性以及記憶管理，影響開發中系統的許多部分。

★＊Unified Process統一過程
使用案例趨向、架構為中心、重複的和遞增的軟體過程
嘗試繪製傳統軟體過程模型最好的功能，並實現敏捷軟體開的發許多功能
階段
-初始(Inception) 客戶溝通、策畫
-精化(Elaboration) 通訊、建模
-建構(Construction) 
-過度(Transition) 交付顧客、回饋
-生產(Production) 軟體監控、支援

＊Personal Software Process (PSP) 個人軟體流程
強調個人在生產的工作產品和最終工作產品品質上的量測
強調盡早識別錯誤和了解什麼樣類型的錯誤會產生的重要性
框架活動
  -計畫(基於此需求發展出專案大小和資源的估計)
  -高階設計(開發每個要被建構元件的外部規格並建立元件的設計)
  -高階設計檢視(運用正規的方法去發現設計上的錯誤，保持度量重要任務)
  -發展(元件層級的設計應精進，程式碼必須產生、檢討、編譯和測試，重要任務和工作結果要保持量測)
  -事後檢討(使用量測和度量蒐集決定流程的有效性。分析的結果要提供修改流程與改進有效性的準則)

＊Team Software Process (TSP) 團隊軟體流程
目標
  -建立自動引導的團隊以規劃和追蹤他們的工作，建立目標和他們自己的流程與計畫
  -讓經理人瞭解該如何訓練和激發他的團隊，及如何協助他們維持最高的效能
  -藉由達成CMM層級5的標準與符合期望的行為，加速軟體流程改進
  -促進大學教授工業團隊的技能
專案活動的範本
  -專案啟動
  -高階設計
  -實行
  -整合和系統測試
  -事後檢討

＊Process Technology Tools處理技術的工具
調整過程模型讓軟體專案團隊使用
允許企業建立共同流程框架、任務集和傘活動的自動化模型
這些自動化模型可以用於確定工作流程和審查替代流程結構
工具可以用來分配，監控，甚至所有被定義為流程模型一部分的軟體工程任務
