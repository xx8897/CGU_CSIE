Pattern-Based Design

★Design Patterns
1.不知道有沒有人為此開發解決方案？
2.描述問題的編碼方式，解決方法能夠重複使用

Basic Concepts
1.允許讀者理解環境&什麼解決方式適合
2.一組要求，包括限制，如何影響系統
3.問題可以在內文中解釋&如何有效應用

Effective Patterns
1.解決問題－非僅是抽象原則策略
2.成熟的概念－方案記綠，非僅是理論
3.解決方案不明顯
4.描述關係
5.有顯著的人類組成(最小人類干涉)

Generative Patterns
1.描述系統重要且可重複使用的方面
2.可用於"生成"應用或基於電腦的系統

★Kinds of Patterns
1.架構模式－描述用結構方法解決的廣泛設計問題
2.資料模式－描述用資料模型解決的重複出現的資料導向問題
3.元件模式－解決子系統&元件開發相關問題
4.介面模式－描述常見介面用戶問題
5.WebApp模式－建構WebApp遇到的常見問題
6.創造模式－專注於物件的創立、組合、表示
	抽象工廠模式、工廠方法模式
7.結構模式－專注於object和class如何組織更大結構關係的問題
	配適器模式、聚合模式
8.行為模式－object之間責任分配相關問題
	責任模式鏈、命令模式

Frameworks
1.模式可能不夠開發完整設計
2.特定骨架的基礎框架
3.不是架構模式，而是一組有"插件點"的框架

Describing a Pattern
1.模式名稱－簡短可表現模式的本質
2.問題－描述模式地址的問題
3.動機－問題例子
4.內容－問題所在的環境
5.強迫－列出系統強制的影響須解決，考慮限制
6.解決方法－解決方法的詳細描述
7.意圖－描述模式&做什麼
8.合作－其他模式有助於解決
9.後果－描述實現模式潛在的後果
10.實施－實施時應考慮的問題
11.已知用途－實際應用中的使用案例
12.相關模式－交叉引用相關設計模式

Pattern Languages
1.包含模板集合
2.使用標準模版
3.顯示如何合作以解決跨應用程序域的問題
4.類似用於特定應用領域中解決問題的指令手冊

Pattern-Based Design
1.軟體設計師呈現系統抽像表示的需求模型
2.需求模型的描述問題集

Thinking in Patterns
1.確保了解大圖
2.檢查大圖，提出抽象層次的模式
3.使用"大圖"模式設計，進一步建立內容or骨架
4."從內容中向內工作"助於設計解決較低抽象層次的模式方法
5.重複1到4直到完成完整設計
6.調整每個模式，優化設計

Design Tasks
1.檢查需求模型&開發問題層次結構
2.確認
3.
4.
5.
6.

Common Design Mistakes
1.沒有足夠時間了解基本問題
2.
3.
4.

Architectural Patterns
Patterns Repositories
Component-Level Patterns

User Interface (UI) Patterns
1.
2.
3.
4.
5.
6.

WebApp Patterns
1.
2.
3.
4.
5.

Design Granularity