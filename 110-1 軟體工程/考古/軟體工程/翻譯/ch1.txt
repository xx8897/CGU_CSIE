＊概觀
由軟體工程師設計、建立
在社會上有實質的影響
在商業、文化、生活中到處都在
軟體工程師有道德的義務，建立可靠的軟體，避免傷害其他人
軟體工程師檢視電腦的軟體，如組成程式、文建、設計建構系統所需的資料
軟體使用者只需要關心軟體產品是否符合期望，並使他們的工作更容易完成

＊對軟體工程師重要的問題
為什麼要這麼久完成？
為什麼開發成本高？
為什麼不能再給客戶之前，發現所有的錯誤？
為什麼花費許多時間和精力維護現有的程式？
為什麼衡量一個正在開發的軟體會很困難？

＊軟體
軟體既是一個產品，也是一個傳送資訊的載體
軟體是被開發不是被製造
軟體不會損壞但會沒有價值
已漸趨於使用軟體復用(將軟體視為組件，建構成不同功能的軟體)的方式建構軟體
，但大部分還是定製軟體(為特定目的特別設計製作的電腦程式)


＊軟體應用領域
系統
應用程式
工程或科學
嵌入式
生產線(包含娛樂)
網路
人工智慧

＊軟體面對的新挑戰
開放式的計算：建立的軟體被允許在各種規模的機器用龐大的網路傳達。
Netsourcing：架構簡單和複雜設計，有利於全球範圍的終端使用者市場。
Open Source：開放原始碼
為了計算應用發布原始碼，顧客可以更簡單與可靠的局部修改

＊遺留系統演進的原因
必須適應，滿足新的計算環境或科技
必須加強，實施新的業務需求條件
必須擴展，用更現代的系統原件建立互動
必須重構，使它在網路環境中可運行

＊Web應用的獨特性質
網路密集
並行性
不可預期的負載
可用性(全天候)
數據驅動
敏感內容
持續演進
即時、立即的(上市時間短)
安全
美學

＊軟體工程實踐
軟體解決方案開發之前先理解問題
設計是關鍵的
軟體應展現高品質
軟體應維護

★＊軟體工程
是建立建全的工程原則，為了以經濟的方式獲得可靠和有效的軟體
是以有系統的、有規範的、可量化的方式來開發、運行和維護軟體的一種應用
包含過程、管理技術、技術方法以及使用工具

★＊一般軟體處理框架
溝通：顧客合作和需求收集
規劃：建立工程工作計劃，描述技術風險，列出必要資源，工作生產的產品，並確定進度表
塑模：創造模型，幫助開發人員和顧客了解需求和軟體設計
建構：代碼生成和測試
配置：軟體表達顧客評估和回饋

＊軟體工程"護傘活動"
軟體專案的追蹤與管控：允許團隊評估進度並採取糾正措施，以維持進度
風險管理：評估可能會影響項目結果或品質的風險
軟體品質保證：必須維持軟體的品質
正規技術評論：在宣傳到下一個活動前，評估產品，以發現和排除錯誤
測量：定義和匯集過程、項目、和產品的措施，以幫助團隊交的付軟體能滿足顧客需求
軟體規畫管理：管理改變的影響
重複使用性管理：定義工作產品再利用的標準，建立機制來實現組件的重複使用
產品的準備與製造：創造模型、文件、記錄、列表等等

＊比較過程模型的屬性
任務之間的整體流程與各層級相互依存關係
工作任務定義每一個活動框架
工程任務被定義為每個架構的活動之程度
工程產品被認同與需要之程度
應用於品質保證活動之方式
應用於項目追蹤和控制活動之方式
詳細的整體程度和嚴謹的進度描述
利益相關者參與該項目之程度
給予計畫團隊的自治程度
規定團隊組織和角色之程度

＊實踐精髓
瞭解問題：溝通和分析
計劃解決方案：軟體設計
執行計劃：代碼產生
檢查結果的準確性：測試和品質保證

＊瞭解問題
誰是利益相關者？
需要什麼樣的功能和特性來解決這個問題？
是否可以找出更小、更容易理解的問題？
圖形分析模型是否可以產生？

＊計劃解決方案
是否曾見過類似問題？
類似問題有被解決？
可以用容易解決的子問題來定義？
可以生創造設計模型？

＊執行計劃
解決方法是否符合計劃？
每個解決方案的部分是否能證明正確？

＊檢查結果
可能可試每個解決方案的部分？
解決方法產生的結果，是否符合資料、數據、功能、特點之需求？

＊軟體實踐的核心原則
軟體存在為了提供價值給使用者
盡量簡單
清楚的目的是每個軟體項目成功的必要關鍵(維持憧憬)
總是明確說明、設計和實施，其他人也會明白你做了什麼執行他/她的任務
對於未來的改變保持開放的，不要將自己的代碼成為困盡(對未來開放)
可多次使用的元件和系統需要提早開始計畫重複使用，用以減少成本和增加價值
在每個動作之前清楚完整的思考，會產生叫好的結果

＊軟體創造
